cd()
{
    #suppliedPath=$(echo "$*" | sed 's|//|/MOST-RECENTLY-MODIFIED-DIR/|g')
    local cdargs=''
    while [[ "$1" =~ ^- ]]
    do
        case "$1" in # Collect any arguments we need to pass through to the real cd
            -L) 
                cdargs+=' -L'
                shift
                ;;
            -P)
                cdargs+=' -P'
                shift
                ;;
            -e)
                cdargs+=' -e'
                shift
                ;;
            -@)
                cdargs+=' -@'
                shift
                ;;
            -) 
                : # Do nothing, cause this is the "go to last dir" argument.
                break
                ;;
            -*) 
                echo "Sorry, $1 is not a valid option." >&2
                shift
                ;;
        esac
    done

    local suppliedPath="$1"
    if [[ ! -z "$suppliedPath" ]]; then # We got a path to cd to
        if [[ "$suppliedPath" = '-' ]]; then # Go to the last dir
            builtin cd "$OLDPWD"
            return $?
        else
            until [[ ! "$suppliedPath" =~ .*//.* ]]; 
            do 
                suppliedPath=$(echo $suppliedPath | sed 's|//|/MOST-RECENTLY-MODIFIED-DIR/|g')
            done

            if [[ ! $suppliedPath =~ ^/ ]]; then #path is relative
                path='' #first arg will be a '.' or '..' and that will be what we build on.
            else
                path='/' # Since we split on slash we need to start with the root.
            fi

            for dir in $(echo $suppliedPath | tr '/' ' ')
            do
                if [[ "$dir" = MOST-RECENTLY-MODIFIED-DIR ]]; then
                    local mostRecent="$(\ls -1t --group-directories-first "$path"  | head -n1)"
                    if [[ -d "$path"/"$mostRecent" ]]; then
                        path+="${mostRecent}/"
                    fi
                else
                    path+="${dir}/"
                fi
            done

            builtin cd $cdargs "$path"
            return $?
        fi
    else # We need to cd to $HOME
        builtin cd $HOME
        return $?
    fi
}
_importsArray[cd]="$(( ${_importsArray[cd]} + 1 ))"
